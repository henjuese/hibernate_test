<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 
    Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping package="cn.one2one.domain">
<class name="Card" table="card">
<!-- 基于主键的one-to-one，所以这里使用外键策略 -->
<!-- 这里的值指定了跟那个属性one-to-one -->
<!-- 
<id name="id" type="java.lang.Integer">
  <generator class="foreign">
    <param name="property">person</param>
  </generator>
</id>
 -->
<!--基于外键的one-to-one -->
 <id name="id" type="java.lang.Integer">
   <generator class="assigned" />
 </id> 
 
<property name="date" type="java.util.Date">
<!-- 注意：表名字不能和数据库里面的关键字相同，如果相同则不能创建成功；我刚开始用date做表名，后来card一直创建不成功，坑爹的啊 -->
  <column name="startdate" />
  
</property>
<!-- 这里配置person和idcard属性是一对一的关系;constrained="true"设置关联，上面id已经设置了id与person里面的id是关联的，这里等于true
  是要把Card.id作为主键同时也是外键
 -->
<!-- 基于主键的one-to-one配置 ，这里通过指定了person的主键来生成该实体的主键
<one-to-one name="person" constrained="true"/> -->

<!-- 基于外键的one-to-one配置 ；unique="true"表示many-to-one的一种特例
    这种方式会再card表里面多出一个字段外键来对应person的主键
-->
<many-to-one name="person" unique="true" column="person_id"/>

<!-- 基于外键和主键的one-to-one之间的区别：
基于主键的：person的主键值就是card的主键值；而且card表中的id即是card的主键也是card的外键。
基于外键的：card的主键就是card的主键，但card还有一个外键，就是person的主键；这种方式下card会多出一个字段来，自己的一个主键，还有一个外键
 -->

</class>
</hibernate-mapping>




